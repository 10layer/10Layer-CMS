/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `articles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content_id` int(11) NOT NULL,
  `blurb` text CHARACTER SET latin1 NOT NULL,
  `body` text CHARACTER SET latin1 NOT NULL,
  `strap` varchar(255) CHARACTER SET latin1 NOT NULL,
  `dateline` varchar(255) CHARACTER SET latin1 NOT NULL,
  `slug` varchar(255) CHARACTER SET latin1 NOT NULL,
  `notes` text CHARACTER SET latin1 NOT NULL,
  `placeline` varchar(100) CHARACTER SET latin1 NOT NULL,
  `embargo` date NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `content_id` (`content_id`),
  FULLTEXT KEY `blurb` (`blurb`,`body`)
) ENGINE=MyISAM AUTO_INCREMENT=29 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='articles';
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `articles` VALUES (22,275,'<p>\n	There are just so many ways to skin the development cat, but some statements from two of the Tech4Africa speakers, Dustin Diaz (Twitter&rsquo;s UX engineer) and John Resig (the JQuery guy) got me thinking of a novel way of developing Convene.tv. (Novel to me, at least.)</p>\n','<p>\n	&nbsp;</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	There are just so many ways to skin the development cat, but some statements from two of the&nbsp;<a href=\"http://http//www.tech4africa.com/\" style=\"color: rgb(219, 2, 2); \">Tech4Africa</a>&nbsp;speakers,&nbsp;<a href=\"http://www.dustindiaz.com/\" style=\"color: rgb(219, 2, 2); \">Dustin Diaz</a>&nbsp;(Twitter&rsquo;s UX engineer) and&nbsp;<a href=\"http://ejohn.org/\" style=\"color: rgb(219, 2, 2); \">John Resig</a>&nbsp;(the&nbsp;<a href=\"http://jquery.org/\" style=\"color: rgb(219, 2, 2); \">JQuery</a>&nbsp;guy) got me thinking of a novel way of developing&nbsp;<a href=\"http://www.convene.tv/\" style=\"color: rgb(219, 2, 2); \">Convene.tv</a>. (Novel to me, at least.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Diaz noted that&nbsp;<a href=\"http://twitter.com/\" style=\"color: rgb(219, 2, 2); \">Twitter</a>&nbsp;initially created features and then built the API, but increasingly is building the&nbsp;<a href=\"http://apiwiki.twitter.com/\" style=\"color: rgb(219, 2, 2); \">API features</a>&nbsp;first and then using that to build Twitter.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Resig&rsquo;s input was based on a question I asked him off-line. I asked him how to I change my mindshift from writing applications that end-users will use, to writing apps that developers will use - and expand, improve and innovate with. (That&#39;s not word-for-word - I can&#39;t remember by mumbled, confused question but he figured out what I was asking.) He told me to write stuff that I would use, and that would help me - don&rsquo;t worry about other people using it. That helped me make the switch to writing apps that are well coded for expansion - some essential advice for my 10Layer coding.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Instead of creating a web site and service, I&rsquo;m creating the entire API first. It&rsquo;s a simple change, but one with a lot of consequences for my personal coding style.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Usually I&rsquo;d start with a basic spec of the features I want, and then design the user interface. I&rsquo;d implement the views (interface), controllers (business logic) and models (data stuff) pretty much by feature. So for my login feature, I&rsquo;d use my base design for the view, create the model, and then pop the business logic in the middle. Testing was pretty simple as I could just test through the front-end, which was already there. Once I was happy, I&rsquo;d move on to the next feature.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	While most developers will probably laugh at me for my crazy dev style, I usually&nbsp;<a href=\"http://en.wikipedia.org/wiki/Cowboy_coding\" style=\"color: rgb(219, 2, 2); \">code solo</a>, so attacking a big project feature-by-feature results in a kind of&nbsp;<a href=\"http://en.wikipedia.org/wiki/Kanban\" style=\"color: rgb(219, 2, 2); \">kanban methodology</a>, and I get results pretty quickly. I still think about reuse as I create my code - particularly with the libraries and models that I build, ensuring that they&rsquo;re rich enough to get me a leg-up on those features I know are coming down the line. So the login model and library will not just check a username and password, it will also offer authentication services for the security system, and handle updating the data for when I get to the user management page.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Occasionally I also build more generic stuff even though it&rsquo;s not required by this specific function, once again because I know it&rsquo;ll be useful, such as an extensible base model that makes implementing future models quick and reliable. Most models include get, insert, delete, and update functions for a specific table, so it&rsquo;s easy to build an abstract or normal class to avoid rewriting these methods. They might not apply to complex models that require lots of joins, but the simple models take a minute to write with a decent base class.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Anyhow, enough about how I usually code. Convene is different. For one, it has an API, which I don&rsquo;t often do. Next, it&rsquo;s a service, as opposed to a product. Finally, should it have any level of success, it will need to be extremely scalable.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	By starting with the API, I immediately sort out the first requirement - the, erm, API. Building an API first really makes a statement that your product IS a service, so check on point two. On making the product scalable, coding the API first - and separately from the site - makes an amazing difference. (Well in theory - it&rsquo;s hardly a rocking operational system at the moment for me to test my hypothesis.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Suddenly, your site is independent of your service. That means that instead of lumping everything into one infrastructure, you can split the API onto its own infrastructure and have the site running separately. That in turn translates to some clever proxying and caching making a massive difference in scalability. You can host the two completely independently - the API in a cloud, and the site on a relatively inexpensive server out of the cloud. (Or in the cloud, or on a web server strapped to your dog, or whatever - you&rsquo;re completely flexible.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	It also means that, once the API is spec&rsquo;d out, you can develop on the API, change databases or move to some NoSql solution, as long as you keep the biz logic the same. It makes it very cool to do future development on, without affecting your front-end server or the service you provide. As long as you stick a question in on one end of the API and get the same answer out, you can stuff about with the code and tech in the middle as much as you like. You can even roll out a crazy dev system in parallel and switch when you&rsquo;re ready, with no noticeable downtime.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Even more importantly, you can play with your front-end site without destroying your service. You can move servers without interrupting those that rely on the API; you can change how data is presented; you can invent new ways to use your own API. Whatever you do, you can&rsquo;t destroy your underlying data or data structure. (Unless you really messed up on the API design and have some serious security issues.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	In line with Ressig&rsquo;s comments, if the API works for me and my site, it should work for others that want to use the API. If it doesn&rsquo;t work for them, it&rsquo;s because they don&rsquo;t think like me, and therefore don&rsquo;t deserve access to my cool service.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	But the biggest change is how I think about software and software design. I suppose it makes me think like those poor coding slobs they keep in the basement of banks, who have to write one object that does one thing, really, really well. Each feature in the API has to do whatever it&rsquo;s meant to do, really well. That doesn&rsquo;t include making it look pretty, have bells and whistles, or having it make coffee. The limit of the view is &ldquo;JSON or XML?&rdquo; (And I&rsquo;m thinking about not bothering with the XML bit. God, I hate XML.) Essentially I&rsquo;m working on the model and controller, which means less than half the work. (I always spend way too much time on the front-end. I&rsquo;ve simply removed the temptation.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	It&rsquo;s also forced me to actually test the code properly, not just hit the form with weird data to see what happens. Since there is no front-end, I&rsquo;m relying on traditional software testing models - write the test, make sure it fails, write the code, test and fix until it passes, and then refactor, rinse and repeat.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	I&rsquo;m not using a testing framework, since I&rsquo;ve written my tests from scratch (which will also form the basis of a PHP library for my service when I&rsquo;m done), but I just found a&nbsp;<a href=\"http://github.com/ericbarnes/codeigniter-simpletest\" style=\"color: rgb(219, 2, 2); \">CodeIgniter SimpleTest implementation</a>&nbsp;which looks really cool.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Coding the API fulfills two of my primary goals - to grow as a developer, and to think in new ways. Unfortunately it won&rsquo;t fulfill my goal of getting&nbsp;<a href=\"http://images.starpulse.com/Photos/Previews/Dark-Angel-tv-07.jpg\" style=\"color: rgb(219, 2, 2); \">Jessica Alba</a>&nbsp;as my second wife, but it&rsquo;s still a pretty cool way to code if the project suits it.</p>\n','','','','','','0000-00-00'),(4,65,'<p>\n	10Layer is a Publishing Framework for serious editorial sites.</p>','<ul style=\"padding-right: 40px; \">\n	<li>\n		Traditional news room values</li>\n	<li>\n		Open and unprescriptive - make your site as unique as you want it to be</li>\n	<li>\n		Advanced workflow that works the way you do</li>\n	<li>\n		Highly scalable for millions of readers</li>\n</ul>','','','','','','0000-00-00'),(5,66,'<p>\n	10Layer is a massive software development undertaking. We&#39;ve tasked ourselves with building a content management system that&#39;s better than anything else on the market, by a mile. We&#39;re not even calling it a content management system - it&#39;s a publishing framework.</p>\n','<p>\n	10Layer is a massive software development undertaking. We&#39;ve tasked ourselves with building a content management system that&#39;s better than anything else on the market, by a mile. We&#39;re not even calling it a content management system - it&#39;s a publishing framework.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	That&#39;s why I&#39;m writing this blog. I&#39;ll keep everyone interested in such things up-to-date with the trials and tribulations of hard-core software development, as well as all the other stuff that goes in to building a software company.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Today we designed, developed and rolled out&nbsp;<a href=\"http://www.10layer.com/\" style=\"color: rgb(219, 2, 2); \" title=\"http://www.10layer.com\">http://www.10layer.com</a>&nbsp;and&nbsp;<a href=\"http://www.convene.tv/\" style=\"color: rgb(219, 2, 2); \" title=\"http://www.convene.tv\">http://www.convene.tv</a>, created this blog page, did our&nbsp;<a href=\"http://newsletter.10layer.com/lists/?p=subscribe&amp;id=1\" style=\"color: rgb(219, 2, 2); \">newsletter system</a>&nbsp;using&nbsp;<a href=\"http://www.phplist.com/\" style=\"color: rgb(219, 2, 2); \">PHPLists</a>, and sorted out our&nbsp;<a href=\"http://www.twitter.com/10layer\" style=\"color: rgb(219, 2, 2); \">Twitter account</a>.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	And that&#39;s all I&#39;m getting in to today, because it&#39;s been exhausting. Over the next few days I&#39;ll blog about how far we&#39;ve come to get this historic record up-to-date, and then I&#39;ll continue with all the exciting stuff we play with every day.</p>\n<p>\n	&nbsp;</p>\n','','','','','','0000-00-00'),(6,67,'<p>\n	&nbsp;</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	It was a fateful day in Cape Town in March; breakfast at the&nbsp;<a href=\"http://maps.google.com/maps/place?oe=UTF-8&amp;gfns=1&amp;um=1&amp;ie=UTF-8&amp;q=olympia+cafe+cape+town&amp;fb=1&amp;hq=olympia+cafe&amp;hnear=Cape+Town,+South+Africa&amp;cid=6785883867842258341&amp;pcsi=6785883867842258341,1\" style=\"color: rgb(219, 2, 2); \">Olympia Cafe</a>&nbsp;with an excellent friend,&nbsp;<a href=\"http://za.linkedin.com/in/gavindudley\" style=\"color: rgb(219, 2, 2); \">Gavin Dudley</a>. Somehow the conversation turned to content management systems for our employers and ex-employers - all mid- to large-sized publishing houses. Gavin told me he&rsquo;d investigated the market and hadn&rsquo;t found a commercial or libre offering that really met the needs of his companies, and I admitted that I hadn&rsquo;t either.</p>\n','<p>\n	&nbsp;</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	It was a fateful day in Cape Town in March; breakfast at the&nbsp;<a href=\"http://maps.google.com/maps/place?oe=UTF-8&amp;gfns=1&amp;um=1&amp;ie=UTF-8&amp;q=olympia+cafe+cape+town&amp;fb=1&amp;hq=olympia+cafe&amp;hnear=Cape+Town,+South+Africa&amp;cid=6785883867842258341&amp;pcsi=6785883867842258341,1\" style=\"color: rgb(219, 2, 2); \">Olympia Cafe</a>&nbsp;with an excellent friend,&nbsp;<a href=\"http://za.linkedin.com/in/gavindudley\" style=\"color: rgb(219, 2, 2); \">Gavin Dudley</a>. Somehow the conversation turned to content management systems for our employers and ex-employers - all mid- to large-sized publishing houses. Gavin told me he&rsquo;d investigated the market and hadn&rsquo;t found a commercial or libre offering that really met the needs of his companies, and I admitted that I hadn&rsquo;t either.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	As the technical manager of the&nbsp;<a href=\"http://www.mg.co.za/\" style=\"color: rgb(219, 2, 2); \">Mail &amp; Guardian Online</a>&nbsp;at the time, I knew that if we found a good product, we&rsquo;d happily spend the money. The M&amp;G is a small operation, and yet requires at least three full-time developers to keep the CMS and site alive. It took so much resource that we didn&rsquo;t spend nearly enough time on developing new product or expanding the site - most of our day was spent moving from one emergency fix to another.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	My conversation with Gavin made me realise that there really isn&rsquo;t any viable solution out there. All the serious publishers were faced with three unappealing choices: buy an amazingly expensive off-the-shelf product and face a great deal of pain integrating it, only to have to work the way the product prescribes; use an open source libre CMS like Wordpress, Drupal or Joomla, which are great for what they are, but terrible choices for serious news publishing sites; or build your own. Most of us build our own.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	The more I thought about it, the more I realised that there&rsquo;s no special secret to CMSes - a CMS puts data into a database. The website pulls it out. That means that the majority of all these home-grown CMSes have a great deal in common - I&rsquo;d say 80 to 90 percent of each CMS is just a repeat of everyone else&rsquo;s CMS.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	But that last 10 to 20 percent is what makes each high-end news site unique, and at the level of customer I&rsquo;m aiming at, unique is vital. It&rsquo;s essential that the CMS is easily, sanely and quickly expandable to appear to be completely customised to readers and the editors and journalists that use the back-end.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	So I spec&rsquo;ed a CMS that I would buy. It needs to be highly customisable and non-proscriptive. It needs to scale quickly and easily, which comes down to architecture. It doesn&rsquo;t need to be complete as I expect to spend quite a bit of time and resources customising it, but I don&rsquo;t need to build a new CMS every time I launch a new site.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	I then included the best features I&rsquo;ve seen in CMSes, as well as the top requests I&rsquo;ve been asked for by editorial staff. The ability to publish to multiple platforms; the ability to publish to multiple publications; versioning; workflow; quality control; giving editors power over their front page.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Knowing editors and journalists well (having been one for over 10 years), I also know what barriers they&rsquo;d put up with, and what would put them off the system. I know what traditional newsroom processes add to content quality, and how important these processes are to differentiate the news site from the common blog.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Finally, I also know what online newspapers struggle with, particularly when it comes to integrating and ingratiating themselves with the larger social community. That&rsquo;s why we&rsquo;re launching a complementary product, Convene, which will help newspapers address this problem.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	So that fateful day in March, sitting in Olympia Cafe in Kalk Bay, Cape Town, planted a seed that&rsquo;s grown and grown until I just couldn&rsquo;t ignore it anymore. I decided to take action. More on that in Part 2.</p>\n','','','','','','0000-00-00'),(7,68,'<p>\n	There are just so many ways to skin the development cat, but some statements from two of the Tech4Africa speakers, Dustin Diaz (Twitter&rsquo;s UX engineer) and John Resig (the JQuery guy) got me thinking of a novel way of developing Convene.tv. (Novel to me, at least.)</p>\n','<p>\n	&nbsp;</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	There are just so many ways to skin the development cat, but some statements from two of the&nbsp;<a href=\"http://http//www.tech4africa.com/\" style=\"color: rgb(219, 2, 2); \">Tech4Africa</a>&nbsp;speakers,&nbsp;<a href=\"http://www.dustindiaz.com/\" style=\"color: rgb(219, 2, 2); \">Dustin Diaz</a>&nbsp;(Twitter&rsquo;s UX engineer) and&nbsp;<a href=\"http://ejohn.org/\" style=\"color: rgb(219, 2, 2); \">John Resig</a>&nbsp;(the&nbsp;<a href=\"http://jquery.org/\" style=\"color: rgb(219, 2, 2); \">JQuery</a>&nbsp;guy) got me thinking of a novel way of developing&nbsp;<a href=\"http://www.convene.tv/\" style=\"color: rgb(219, 2, 2); \">Convene.tv</a>. (Novel to me, at least.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Diaz noted that&nbsp;<a href=\"http://twitter.com/\" style=\"color: rgb(219, 2, 2); \">Twitter</a>&nbsp;initially created features and then built the API, but increasingly is building the&nbsp;<a href=\"http://apiwiki.twitter.com/\" style=\"color: rgb(219, 2, 2); \">API features</a>&nbsp;first and then using that to build Twitter.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Resig&rsquo;s input was based on a question I asked him off-line. I asked him how to I change my mindshift from writing applications that end-users will use, to writing apps that developers will use - and expand, improve and innovate with. (That&#39;s not word-for-word - I can&#39;t remember by mumbled, confused question but he figured out what I was asking.) He told me to write stuff that I would use, and that would help me - don&rsquo;t worry about other people using it. That helped me make the switch to writing apps that are well coded for expansion - some essential advice for my 10Layer coding.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Instead of creating a web site and service, I&rsquo;m creating the entire API first. It&rsquo;s a simple change, but one with a lot of consequences for my personal coding style.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Usually I&rsquo;d start with a basic spec of the features I want, and then design the user interface. I&rsquo;d implement the views (interface), controllers (business logic) and models (data stuff) pretty much by feature. So for my login feature, I&rsquo;d use my base design for the view, create the model, and then pop the business logic in the middle. Testing was pretty simple as I could just test through the front-end, which was already there. Once I was happy, I&rsquo;d move on to the next feature.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	While most developers will probably laugh at me for my crazy dev style, I usually&nbsp;<a href=\"http://en.wikipedia.org/wiki/Cowboy_coding\" style=\"color: rgb(219, 2, 2); \">code solo</a>, so attacking a big project feature-by-feature results in a kind of&nbsp;<a href=\"http://en.wikipedia.org/wiki/Kanban\" style=\"color: rgb(219, 2, 2); \">kanban methodology</a>, and I get results pretty quickly. I still think about reuse as I create my code - particularly with the libraries and models that I build, ensuring that they&rsquo;re rich enough to get me a leg-up on those features I know are coming down the line. So the login model and library will not just check a username and password, it will also offer authentication services for the security system, and handle updating the data for when I get to the user management page.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Occasionally I also build more generic stuff even though it&rsquo;s not required by this specific function, once again because I know it&rsquo;ll be useful, such as an extensible base model that makes implementing future models quick and reliable. Most models include get, insert, delete, and update functions for a specific table, so it&rsquo;s easy to build an abstract or normal class to avoid rewriting these methods. They might not apply to complex models that require lots of joins, but the simple models take a minute to write with a decent base class.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Anyhow, enough about how I usually code. Convene is different. For one, it has an API, which I don&rsquo;t often do. Next, it&rsquo;s a service, as opposed to a product. Finally, should it have any level of success, it will need to be extremely scalable.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	By starting with the API, I immediately sort out the first requirement - the, erm, API. Building an API first really makes a statement that your product IS a service, so check on point two. On making the product scalable, coding the API first - and separately from the site - makes an amazing difference. (Well in theory - it&rsquo;s hardly a rocking operational system at the moment for me to test my hypothesis.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Suddenly, your site is independent of your service. That means that instead of lumping everything into one infrastructure, you can split the API onto its own infrastructure and have the site running separately. That in turn translates to some clever proxying and caching making a massive difference in scalability. You can host the two completely independently - the API in a cloud, and the site on a relatively inexpensive server out of the cloud. (Or in the cloud, or on a web server strapped to your dog, or whatever - you&rsquo;re completely flexible.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	It also means that, once the API is spec&rsquo;d out, you can develop on the API, change databases or move to some NoSql solution, as long as you keep the biz logic the same. It makes it very cool to do future development on, without affecting your front-end server or the service you provide. As long as you stick a question in on one end of the API and get the same answer out, you can stuff about with the code and tech in the middle as much as you like. You can even roll out a crazy dev system in parallel and switch when you&rsquo;re ready, with no noticeable downtime.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Even more importantly, you can play with your front-end site without destroying your service. You can move servers without interrupting those that rely on the API; you can change how data is presented; you can invent new ways to use your own API. Whatever you do, you can&rsquo;t destroy your underlying data or data structure. (Unless you really messed up on the API design and have some serious security issues.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	In line with Ressig&rsquo;s comments, if the API works for me and my site, it should work for others that want to use the API. If it doesn&rsquo;t work for them, it&rsquo;s because they don&rsquo;t think like me, and therefore don&rsquo;t deserve access to my cool service.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	But the biggest change is how I think about software and software design. I suppose it makes me think like those poor coding slobs they keep in the basement of banks, who have to write one object that does one thing, really, really well. Each feature in the API has to do whatever it&rsquo;s meant to do, really well. That doesn&rsquo;t include making it look pretty, have bells and whistles, or having it make coffee. The limit of the view is &ldquo;JSON or XML?&rdquo; (And I&rsquo;m thinking about not bothering with the XML bit. God, I hate XML.) Essentially I&rsquo;m working on the model and controller, which means less than half the work. (I always spend way too much time on the front-end. I&rsquo;ve simply removed the temptation.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	It&rsquo;s also forced me to actually test the code properly, not just hit the form with weird data to see what happens. Since there is no front-end, I&rsquo;m relying on traditional software testing models - write the test, make sure it fails, write the code, test and fix until it passes, and then refactor, rinse and repeat.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	I&rsquo;m not using a testing framework, since I&rsquo;ve written my tests from scratch (which will also form the basis of a PHP library for my service when I&rsquo;m done), but I just found a&nbsp;<a href=\"http://github.com/ericbarnes/codeigniter-simpletest\" style=\"color: rgb(219, 2, 2); \">CodeIgniter SimpleTest implementation</a>&nbsp;which looks really cool.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Coding the API fulfills two of my primary goals - to grow as a developer, and to think in new ways. Unfortunately it won&rsquo;t fulfill my goal of getting&nbsp;<a href=\"http://images.starpulse.com/Photos/Previews/Dark-Angel-tv-07.jpg\" style=\"color: rgb(219, 2, 2); \">Jessica Alba</a>&nbsp;as my second wife, but it&rsquo;s still a pretty cool way to code if the project suits it.</p>\n','','','','','','0000-00-00'),(8,69,'<p>\n	Thanks to Candice and Duncan at <a href=\"http://www.techcentral.co.za/\" style=\"color: rgb(219, 2, 2); \">TechCentral</a> for the awesome coverage, and for producing an excellent local IT content site. </p>','<p>\n	 </p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	\"A fast-growing online publishing industry has been waiting for an easy-to-use, versatile and affordable publishing system for years. No one knows this better than Jason Norwood-Young, founder of start-up 10Layer, who wants to rival large international development houses with a new publishing framework.\" <a href=\"http://www.techcentral.co.za/start-up-10layer-eyes-web-publishing-gap/16750/\" style=\"color: rgb(219, 2, 2); \">Full article</a></p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Thanks to Candice and Duncan at <a href=\"http://www.techcentral.co.za/\" style=\"color: rgb(219, 2, 2); \">TechCentral</a> for the awesome coverage, and for producing an excellent local IT content site. My wife/PR still doesn\'t like the photo though ;).</p>','','','','','','2011-09-15'),(9,70,'<p>\n	<a href=\"http://convene.tv/\" style=\"color: rgb(219, 2, 2); \">Convene.tv</a>, the reinvention of commenting, is starting to take shape. The first live concept implementation is on&nbsp;<a href=\"http://www.thedailymaverick.co.za/\" style=\"color: rgb(219, 2, 2); \">The Daily Maverick</a>, where we&rsquo;re tracking The Daily Maverick&rsquo;s main topics. So far the results are interesting.</p>\n','<p>\n	&nbsp;</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	<a href=\"http://convene.tv/\" style=\"color: rgb(219, 2, 2); \">Convene.tv</a>, the reinvention of commenting, is starting to take shape. The first live concept implementation is on&nbsp;<a href=\"http://www.thedailymaverick.co.za/\" style=\"color: rgb(219, 2, 2); \">The Daily Maverick</a>, where we&rsquo;re tracking The Daily Maverick&rsquo;s main topics. So far the results are interesting.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Bear in mind that this is what The Daily Maverick writes about, not necessarily what the most popular topics on the site are.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	<strong>Top 10 The Daily Maverick article topics</strong></p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Type: Name</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	1. Country: South Africa</p>\n<p>\n	2. Person: Julius Malema</p>\n<p>\n	3. Country: United States</p>\n<p>\n	4. Position: President</p>\n<p>\n	5. Person: Jacob Zuma</p>\n<p>\n	6. Person: Barack Obama</p>\n<p>\n	7. Country: China</p>\n<p>\n	8. Currency: USD</p>\n<p>\n	9. Continent: Africa</p>\n<p>\n	10. SportsEvent: The World Cup</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Further down the list, we find even more interesting data - The Daily Maverick is more likely to write about the&nbsp;<a href=\"http://www.mg.co.za/\" style=\"color: rgb(219, 2, 2); \">Mail &amp; Guardian</a>&nbsp;(16) than the ANC (18) or FIFA (19). Cape Town makes the list at 17, while Johannesburg only comes up at position 40.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Assumably primarily due to World Cup coverage, Australia (14) trumps Germany (15), and they&rsquo;re both far ahead of the United Kingdom (25). Spain (21) sits somewhere in the middle, despite their World Cup win.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Mail &amp; Guardian editor Nic Dawes (23) beats Jacki Selebi (26), Sarah Palin (27), Helen Zille (31) and Sepp Blatter (22).</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	The Daily Maverick&rsquo;s favourite sports are (in order): Soccer, Rugby, Baseball, Cricket, and Football. (Soccer and football, being the same thing, despite what the Americans think, points to the challenges of indexing any site.)</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Companies likely to get coverage on The Daily Maverick are (in order): the Mail &amp; Guardian, Facebook, Ford, ANC, Cell C, Google, Sunday Times, Nedbank, the New York Times, CNN, Twitter, BBC, Reuters, Suzuki, PayPal, DStv, Volkswagen, FNB, Mazda, Grocott&rsquo;s Mail, the Road Traffic Management Corporation, and YouTube.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Favourite organizations are the ANC Youth League, the ANC, FIFA, the Pentagon, the White House, Scotland Yard, the Press Council, Princeton University and the Taliban.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	If you are a president, judge, coach, reporter, CEO, or author, you&rsquo;re likely to get reported on. After that, it&#39;s captain, editor, minister, king, journalist, director, mayor, head, writer, and leader.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Useful information for marketing companies, The Daily Maverick&rsquo;s favourite products are cars, by a mile. Of the top 10 products mentioned on The Daily Maverick, nine are cars, with the Kindle slipping in at position 8. Further down the list, hidden amongst the cars, is the iPad and the Tupolev Tu-154 (which I think is an airplane).</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	So if you want to make it into the Daily Maverick, it&rsquo;ll help if you&rsquo;re the South African president of the ANC Youth League, drive a nice car, and have some issue with the Mail &amp; Guardian. Which tallies nicely with The Daily Maverick&rsquo;s favourite person being Julius Malema.</p>\n','','','','','','0000-00-00'),(10,71,'<p>\n	&nbsp;</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	10Layer is getting close to its first version release. We&#39;ve had to scale back on some of the features we wanted in the first release, but have added other features that we didn&#39;t initially plan for. We&#39;ll be publishing posts over the coming weeks on different features, starting with that rather important but often overlooked feature, Security.</p>\n','<p>\n	&nbsp;</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	10Layer is getting close to its first version release. We&#39;ve had to scale back on some of the features we wanted in the first release, but have added other features that we didn&#39;t initially plan for. We&#39;ll be publishing posts over the coming weeks on different features, starting with that rather important but often overlooked feature, Security.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Security was the first feature we developed, to ensure that it&#39;s integrated with every level of the application.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	The security module loads before any page loads, using a pre-load hook in our controllers. This means that nothing happens before we check that the user is allowed to perform the action.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Users are assigned groups for access control. These groups are distinct from Workflow groups. For instance, someone who is a &quot;Journalist&quot; could have administrator privileges, while an &quot;Editor&quot; might only have permission to edit articles. This is because your role in an organisation doesn&#39;t equate to your technical ability. We&#39;d like to enable our clients to decide who is (and isn&#39;t) capable of making changes to the CMS - regardless of their role in the newsroom.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Because 10Layer is designed to be highly customised by our clients, they could add new features and plugins that we haven&#39;t built in, but they still need the same security across any new features that get thrown in. 10Layer is pretty smart about this - it automatically finds any new features added to the environment by examining the code in the system. Throw in a new controller, and you&#39;ll instantly see all the methods pop up in the access control admin console.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	The security works by monitoring the urls. Administrators can manage /manage/users/*, whereas normal users can be excluded from this url. Stats viewers (such as your sales team) could be denied permission from the entire site, except for /stats/*.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Security, as with the whole of 10Layer framework, is easy to expand or modify. For users who wanted more security, it would be easy to add one-time password authentication with an OTP device or through a cell phone callback.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	While security was the first feature implemented, it&#39;ll also be the one feature we completely audit and refine before the release of Version 1.</p>\n','','','','','','0000-00-00'),(11,72,'<p>\n	Versioning is key in the 10Layer design concept, because the versions do a lot more than just act as a cheap backup for content.</p>\n','<p>\n	Versioning is key in the 10Layer design concept, because the versions do a lot more than just act as a cheap backup for content.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Versioning is used for three other key purposes - workflow, multi-platform support and mutli-publication support.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	For the workflow functionality, the primary version number of a type of content, ie. version 1.0, 2.0, 3.0 etc defines where the content is in the workflow. If the workflow design requires the content to originate with a journalist, go through a sub-editor, and finally be published by an editor, the primary version number represents each step in the workflow. A version 1.x article means that it&#39;s been created by the journalist and is sitting in the sub-editors&#39; queue. A 2.x version means that it&#39;s been subbed and is awaiting an editor to approve it. A 3.x version is ready for publishing.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	The next use of versioning is to allow the content to be formatted for multiple platforms. Say a long feature is submitted. Once it&#39;s had an initial edit, the versions can be forked out. If we&#39;re publishing to the iPad, a news site, a mobile site and Twitter, we can create a fork for each of these platforms and edit them separately. The The iPad version could carry the full article, the news site might get trimmed to 600 words and the mobile site could go down to 200 words. The Twitter content gets automatically generated with an url and the headline, but we have the option of editing this without affecting the original article. At any time we can go back up the version stack and reference the original article and see what&#39;s been cut - and who did the cutting.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Versions do not have such a great impact on the multi-publication features, but the concept of forking works here too. We could publish a mini-site about a topic, and edit the original content to be a bit different across both sites.</p>\n<p style=\"margin-top: 1em; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; \">\n	Another cool thing about 10Layer&#39;s architecture is that versioning applies to all content, not just articles. Pages, photos, multimedia or whatever content you store all gets treated with versions, and through versions each content type can follow a unique or standard workflow pattern.</p>\n','','','','','','0000-00-00'),(23,279,'<p>\n	10Layer is a Publishing Framework for serious editorial sites.</p>\n','<ul style=\"padding-right: 40px; \">\n	<li>\n		Traditional news room values</li>\n	<li>\n		Open and unprescriptive - make your site as unique as you want it to be</li>\n	<li>\n		Advanced workflow that works the way you do</li>\n	<li>\n		Highly scalable for millions of readers</li>\n</ul>\n','','','','','','0000-00-00');
